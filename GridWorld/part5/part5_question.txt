1. Where is the isValid method specified? Which classes provide an implementation of this method?

  The isValid method is specified in interface Grid
  Both BoundedGrid and UnboundedGrid class implemented this method

2. Which AbstractGrid methods call the isValid method? Why don't the other methods need to call it?

  getValidAdjacentLocations.
  beacuse other will use getValidAdjacentLocations directly, it's faster

3. Which methods of the Grid interface are called in the getNeighbors method? Which classes provide implementations of these methods?

  getOccupiedAdjacentLocations
  AbstractGrid , BoundedGrid and UnboundedGrid class implemented this method

4. Why must the get method, which returns an object of type E, be used in the getEmptyAdjacentLocations method when this method returns locations, not objects of type E?

  it is used to check whether the location is empty or not,if not then add the locations, then return

5. What would be the effect of replacing the constant Location.HALF_RIGHT with Location.RIGHT in the two places where it occurs in the getValidAdjacentLocations method?

  it will decrease 8 directions to 4 directions.





1. What ensures that a grid has at least one valid location?

  if will throw an IllegalArgumentException, if the number of rows or colums less than 1.

2. How is the number of columns in the grid determined by the getNumCols method? What assumption about the grid makes this possible?

  The getNumCols method return the length of occupantArray[0]
  occupantArray[][] != null must true.

3. What are the requirements for a Location to be valid in a BoundedGrid?

  0 <= row(Location) < row(grid)
  0 <= col(Location) < col(grid)	

In the next four questions, let r = number of rows, c = number of columns, and n = number of occupied locations.
4. What type is returned by the getOccupiedLocations method? What is the time complexity (Big-Oh) for this method?

  ArrayList<Location>
  the time complexity is O(r*c)

5. What type is returned by the get method? What parameter is needed? What is the time complexity (Big-Oh) for this method?

  E
  time complexity is O(1).

6. What conditions may cause an exception to be thrown by the put method? What is the time complexity (Big-Oh) for this method?

  location is not valid or the object is null.
  The time complexity is O(1).

7. What type is returned by the remove method? What happens when an attempt is made to remove an item from an empty location? What is the time complexity (Big-Oh) for this method?

  E
  it will return null.
  The time complexity is O(1).

8. Based on the answers to questions 4, 5, 6, and 7, would you consider this an efficient implementation? Justify your answer.

  Yes, most methods has an O(1) complexity.

  
  
  
1. Which method must the Location class implement so that an instance of HashMap can be used for the map? What would be required of the Location class if a TreeMap were used instead? Does Location satisfy these requirements?

  the hashCode method, the compareTo method must be implemented
  if a TreeMap were used instead, the key is required.
  Yes, the Location satisfy these requirements.

2. Why are the checks for null included in the get, put, and remove methods? Why are no such checks included in the corresponding methods for the BoundedGrid?

  beacuse unboundedgrid uses a HashMap to store the object, the isValid method returns true all the time. but null is not avalid location so these methods should check them
  in BoundedGrid, it uses the isValid method to check whether it is valid or not before it try to get the occupantArray. If the method get null location, it will throw a NullPointerException.

3. What is the average time complexity (Big-Oh) for the three methods: get, put, and remove? What would it be if a TreeMap were used instead of a HashMap?

  O(1), O(1), O(1)
  TreeMap: O(n)
  
4. How would the behavior of this class differ, aside from time complexity, if a TreeMap were used instead of a HashMap?

  Some objects' list order is different, like getOccupiedAdjacentLocations method. Because the TreeMap stores them in an balanced binary search tree.

5. Could a map implementation be used for a bounded grid? What advantage, if any, would the two-dimensional array implementation that is used by the BoundedGrid class have over a map implementation?
  
  Yes, some methods have less time complexity, like getOccupiedLocations method, for a bounded grid redueces its time complexity from O(r*c) to O(n). if the bounded grid is large and contains many object, it becomes slow and uses more memory.
  
  
  